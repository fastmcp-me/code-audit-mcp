name: Release and Publish

on:
  push:
    tags:
      - 'v1.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'
  PACKAGE_SCOPE: '@moikas'

jobs:
  validate:
    name: Validate and Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test-audit

  build:
    name: Build Artifacts
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify code quality before build
        run: npm run quality-check

      - name: Update package.json for scoped publication
        run: |
          # Check if version needs updating
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ needs.validate.outputs.version }}"

          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            npm version $TARGET_VERSION --no-git-tag-version
          else
            echo "Version already set to $TARGET_VERSION, skipping npm version"
          fi

          # Package name is already correct in package.json as @moikas/code-audit-mcp
          cat package.json | grep -A 5 -B 5 '"name":'

      - name: Build project
        run: npm run build

      - name: Create tarball
        run: |
          npm pack
          echo "Created tarball:"
          ls -la *.tgz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: |
            *.tgz
            dist/
            bin/
            package.json
          retention-days: 30

  test-matrix:
    name: Test on Multiple Platforms
    needs: [validate, build]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['18', '20', '22']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Install and test package
        shell: bash
        run: |
          # List all files to debug
          echo "Files in directory:"
          ls -la

          # Find tgz files one per line
          echo "Tarballs found:"
          find . -maxdepth 1 -name "*.tgz" -type f

          # Find the correct tarball file - use find to ensure one per line
          TARBALL=$(find . -maxdepth 1 -name "moikas-code-audit-mcp-*.tgz" -type f | head -n1)
          if [ -z "$TARBALL" ]; then
            # Fallback to any .tgz file
            TARBALL=$(find . -maxdepth 1 -name "*.tgz" -type f | head -n1)
          fi

          # Remove leading ./ if present
          TARBALL=${TARBALL#./}

          echo "Installing tarball: $TARBALL"
          npm install -g "$TARBALL"
          code-audit --version || echo "Global install test failed"

  publish-npm:
    name: Publish to NPM
    needs: [validate, build, test-matrix]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "@moikas:registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: Publish to NPM
        run: |
          # Find the tarball file
          TARBALL=$(find . -maxdepth 1 -name "*.tgz" -type f | head -n1)
          TARBALL=${TARBALL#./}
          echo "Publishing tarball: $TARBALL"
          npm publish "$TARBALL" --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify publication
        run: |
          sleep 30
          npm view @moikas/code-audit-mcp@${{ needs.validate.outputs.version }} --json

  create-github-release:
    name: Create GitHub Release
    needs: [validate, publish-npm]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v1')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            *.tgz
          body: |
            ## Code Audit MCP v1.0.0 - Initial Release

            ### üöÄ Features
            - AI-powered code auditing via MCP using local Ollama models
            - Comprehensive security, performance, and quality analysis
            - Multiple audit types: security, completeness, performance, quality, architecture, testing, documentation
            - Global CLI tool with interactive commands
            - Support for multiple programming languages

            ### üîß Components
            - MCP server for Claude integration
            - Ollama client with model management
            - Configurable auditor system
            - Health monitoring and diagnostics

            ### üì¶ Installation
            ```bash
            npm install -g @moikas/code-audit-mcp@${{ needs.validate.outputs.version }}
            ```

            ### üîó Links
            - [NPM Package](https://www.npmjs.com/package/@moikas/code-audit-mcp)
            - [Documentation](https://github.com/warrengates/code-audit-mcp#readme)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-Release Notifications
    needs: [validate, publish-npm, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Success notification
        if: needs.publish-npm.result == 'success'
        run: |
          echo "‚úÖ Successfully published @moikas/code-audit-mcp@${{ needs.validate.outputs.version }}"
          echo "üì¶ Package available at: https://www.npmjs.com/package/@moikas/code-audit-mcp"

      - name: Failure notification
        if: needs.publish-npm.result == 'failure'
        run: |
          echo "‚ùå Failed to publish @moikas/code-audit-mcp@${{ needs.validate.outputs.version }}"
          exit 1
